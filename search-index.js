var searchIndex = {};
searchIndex['clap'] = {"items":[[0,"","clap","Command Line Argument Parser for Rust",null,null],[11,"load_from_str","yaml_rust::yaml","",0,{"inputs":[{"name":"yamlloader"},{"name":"str"}],"output":{"name":"result"}}],[11,"cmp","","",1,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"fmt","","",1,{"inputs":[{"name":"yaml"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",1,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"option"}}],[11,"lt","","",1,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",1,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",1,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",1,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"eq","","",1,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"clone","","",1,{"inputs":[{"name":"yaml"}],"output":{"name":"yaml"}}],[11,"on_event","","",0,null],[11,"as_bool","","",1,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_i64","","",1,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_str","","",1,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_hash","","",1,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_vec","","",1,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"is_null","","",1,{"inputs":[{"name":"yaml"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",1,{"inputs":[{"name":"yaml"}],"output":{"name":"bool"}}],[11,"as_f64","","",1,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"from_str","","",1,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",1,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",1,{"inputs":[{"name":"yaml"},{"name":"usize"}],"output":{"name":"yaml"}}],[11,"fmt","yaml_rust::scanner","",2,{"inputs":[{"name":"tencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"tencoding"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"tencoding"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"tencoding"}],"output":{"name":"tencoding"}}],[11,"fmt","","",3,{"inputs":[{"name":"tscalarstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"tscalarstyle"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"tscalarstyle"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"tscalarstyle"}],"output":{"name":"tscalarstyle"}}],[11,"fmt","","",4,{"inputs":[{"name":"marker"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"marker"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"marker"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"marker"}],"output":{"name":"marker"}}],[11,"fmt","","",5,{"inputs":[{"name":"scanerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"scanerror"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"scanerror"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"scanerror"}],"output":{"name":"scanerror"}}],[11,"new","","",5,{"inputs":[{"name":"scanerror"},{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"description","","",5,{"inputs":[{"name":"scanerror"}],"output":{"name":"str"}}],[11,"cause","","",5,{"inputs":[{"name":"scanerror"}],"output":{"name":"option"}}],[11,"fmt","","",5,{"inputs":[{"name":"scanerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",6,{"inputs":[{"name":"tokentype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"tokentype"}],"output":{"name":"tokentype"}}],[11,"fmt","","",7,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"fmt","","",8,{"inputs":[{"name":"simplekey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",8,{"inputs":[{"name":"simplekey"},{"name":"simplekey"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"simplekey"},{"name":"simplekey"}],"output":{"name":"bool"}}],[11,"clone","","",8,{"inputs":[{"name":"simplekey"}],"output":{"name":"simplekey"}}],[11,"fmt","","",9,{"inputs":[{"name":"scanner"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"option"}}],[11,"new","","Creates the YAML tokenizer.",9,{"inputs":[{"name":"scanner"},{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"option"}}],[11,"stream_started","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"bool"}}],[11,"stream_ended","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"bool"}}],[11,"mark","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"marker"}}],[11,"fetch_next_token","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"result"}}],[11,"next_token","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"result"}}],[11,"fetch_more_tokens","","",9,{"inputs":[{"name":"scanner"}],"output":{"name":"result"}}],[11,"fmt","yaml_rust::parser","",10,{"inputs":[{"name":"state"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",10,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"state"},{"name":"state"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"state"}],"output":{"name":"state"}}],[11,"fmt","","",11,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"fmt","","",12,{"inputs":[{"name":"parser"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",12,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"load","","",12,{"inputs":[{"name":"parser"},{"name":"r"},{"name":"bool"}],"output":{"name":"result"}}],[11,"fmt","yaml_rust::emitter","",13,{"inputs":[{"name":"emiterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",13,{"inputs":[{"name":"emiterror"}],"output":{"name":"emiterror"}}],[11,"from","","",13,{"inputs":[{"name":"emiterror"},{"name":"error"}],"output":{"name":"emiterror"}}],[11,"new","","",14,{"inputs":[{"name":"yamlemitter"},{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"dump","","",14,{"inputs":[{"name":"yamlemitter"},{"name":"yaml"}],"output":{"name":"result"}}],[3,"YamlLoader","clap","",null,null],[3,"Arg","","The abstract representation of a command line argument used by the consumer of the library.\nUsed to set all the options and relationships that define a valid argument for the program.",null,null],[12,"name","","The unique name of the argument",15,null],[12,"short","","The short version (i.e. single character) of the argument, no preceding `-`\n**NOTE:** `short` is mutually exclusive with `index`",15,null],[12,"long","","The long version of the flag (i.e. word) without the preceding `--`\n**NOTE:** `long` is mutually exclusive with `index`",15,null],[12,"help","","The string of text that will displayed to the user when the application's\n`help` text is displayed",15,null],[12,"required","","If this is a required by default when using the command line program,\ne.g. a configuration file that's required for the program to function\n**NOTE:** required by default means it is required *until* mutually\nexclusive arguments are evaluated.",15,null],[12,"takes_value","","Determines if this argument is an option (as opposed to flag or positional) and\nis mutually exclusive with `index` and `multiple`",15,null],[12,"index","","The index of the argument. `index` is mutually exclusive with `takes_value`\nand `multiple`",15,null],[12,"multiple","","Determines if multiple instances of the same flag are allowed. `multiple`\nis mutually exclusive with `index`.\ne.g. `-v -v -v` or `-vvv` or `--option foo --option bar`",15,null],[12,"blacklist","","A list of names for other arguments that *may not* be used with this flag",15,null],[12,"possible_vals","","A list of possible values for an option or positional argument",15,null],[12,"requires","","A list of names of other arguments that are *required* to be used when\nthis flag is used",15,null],[12,"group","","A name of the group the argument belongs to",15,null],[12,"val_names","","A set of names (ordered) for the values to be displayed with the help message",15,null],[12,"num_vals","","The exact number of values to satisfy this argument",15,null],[12,"max_vals","","The maximum number of values possible for this argument",15,null],[12,"min_vals","","The minimum number of values possible to satisfy this argument",15,null],[12,"empty_vals","","Specifies whether or not this argument accepts explicit empty values such as `--option \"\"`",15,null],[12,"global","","Specifies whether or not this argument is global and should be propagated through all\nchild subcommands",15,null],[12,"validator","","A function used to check the validity of an argument value. Failing this validation results\nin failed argument parsing.",15,null],[12,"overrides","","A list of names for other arguments that *mutually override* this flag",15,null],[12,"hidden","","Specifies whether the argument should show up in the help message",15,null],[3,"ArgGroup","","`ArgGroup`s are a family of related arguments and way for you to say, \"Any of these arguments\".\nBy placing arguments in a logical group, you can make easier requirement and exclusion rules\ninstead of having to list each individually, or when you want a rule to apply \"any but not all\"\narguments.",null,null],[3,"ArgMatches","","Used to get information about the arguments that where supplied to the program at runtime by\nthe user. To get a new instance of this struct you use `.get_matches()` of the `App` struct.",null,null],[3,"SubCommand","","The abstract representation of a command line subcommand used by the consumer of the library.",null,null],[3,"App","","Used to create a representation of a command line program and all possible command line\narguments.",null,null],[3,"ClapError","","Command line argument parser error",null,null],[12,"error","","Formated error message",16,null],[12,"error_type","","The type of error",16,null],[4,"AppSettings","","Application level settings, which affect how `App` operates",null,null],[13,"SubcommandsNegateReqs","","Allows subcommands to override all requirements of the parent (this command). For example\nif you had a subcommand or even top level application which had a required arguments that\nare only required as long as there is no subcommand present.",17,null],[13,"SubcommandRequired","","Allows specifying that if no subcommand is present at runtime, error and exit gracefully",17,null],[13,"ArgRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no\narguments are present at runtime (i.e. an empty run such as, `$ myprog`.",17,null],[13,"GlobalVersion","","Uses version of the current command for all subcommands. (Defaults to false; subcommands\nhave independant version strings)",17,null],[13,"VersionlessSubcommands","","Disables `-V` and `--version` for all subcommands (Defaults to false; subcommands have\nversion flags)",17,null],[13,"UnifiedHelpMessage","","By default the auto-generated help message groups flags, options, and positional arguments\nseparately. This setting disable that and groups flags and options together presenting a\nmore unified help message (a la getopts or docopt style).",17,null],[13,"WaitOnError","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait user before\nexiting",17,null],[13,"SubcommandRequiredElseHelp","","Specifies that the help text should be displayed (and then exit gracefully), if no\nsubcommands are present at runtime (i.e. an empty run such as, `$ myprog`.",17,null],[13,"Hidden","","Specifies that this subcommand should be hidden from help messages",17,null],[13,"TrailingVarArg","","Specifies that the final positional argument is a vararg and that `clap` should not attempt\nto parse any further args.",17,null],[13,"NoBinaryName","","Specifies that the parser should not assume the first argument passed is the binary name.\nThis is normally the case when using a \"daemon\" style mode, or an interactive CLI where one\none would not normally type the binary or program name for each command.",17,null],[4,"Format","","Defines styles for different types of error messages. Defaults to Error=Red, Warning=Yellow,\nand Good=Green",null,null],[13,"Error","","Defines the style used for errors, defaults to Red",18,null],[13,"Warning","","Defines the style used for warnings, defaults to Yellow",18,null],[13,"Good","","Defines the style used for good values, defaults to Green",18,null],[4,"ClapErrorType","","Command line argument parser error types",null,null],[13,"InvalidValue","","Error occurs when some possible values were set, but clap found unexpected value",19,null],[13,"InvalidArgument","","Error occurs when clap found unexpected flag or option",19,null],[13,"InvalidSubcommand","","Error occurs when clap found unexpected subcommand",19,null],[13,"EmptyValue","","Error occurs when option does not allow empty values but some was found",19,null],[13,"ValueValidationError","","Option fails validation of a custom validator",19,null],[13,"ArgumentError","","Parser inner error",19,null],[13,"TooManyArgs","","Error occurs when an application got more arguments then were expected",19,null],[13,"TooManyValues","","Error occurs when argument got more values then were expected",19,null],[13,"TooFewValues","","Error occurs when argument got less values then were expected",19,null],[13,"WrongNumValues","","Error occurs when argument got a different number of values then were expected",19,null],[13,"ArgumentConflict","","Error occurs when clap find two ore more conflicting arguments",19,null],[13,"MissingRequiredArgument","","Error occurs when one or more required arguments missing",19,null],[13,"MissingSubcommand","","Error occurs when required subcommand missing",19,null],[13,"MissingArgumentOrSubcommand","","Occurs when no argument or subcommand has been supplied and\n`AppSettings::ArgRequiredElseHelp` was used",19,null],[13,"UnexpectedArgument","","Error occurs when clap find argument while is was not expecting any",19,null],[13,"UnexpectedMultipleUsage","","Error occurs when argument was used multiple times and was not set as multiple.",19,null],[13,"InvalidUnicode","","Error occurs when argument contains invalid unicode characters",19,null],[13,"HelpDisplayed","","Not a true 'error' as it means `--help` or similar was used. The help message will be sent\nto `stdout` unless the help is displayed due to an error (such as missing subcommands) at\nwhich point it will be sent to `stderr`",19,null],[13,"VersionDisplayed","","Not a true 'error' as it means `--version` or similar was used. The message will be sent\nto `stdout`",19,null],[13,"InternalError","","Represents an internal error, please consider filing a bug report if this happens!",19,null],[13,"Io","","Represents an I/O error, typically white writing to stderr or stdout",19,null],[13,"Format","","Represents an Rust Display Format error, typically white writing to stderr or stdout",19,null],[11,"clone","","",17,{"inputs":[{"name":"appsettings"}],"output":{"name":"appsettings"}}],[11,"eq","","",17,{"inputs":[{"name":"appsettings"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"appsettings"},{"name":"appsettings"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"appsettings"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",17,{"inputs":[{"name":"appsettings"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","","Creates a new instance of an application requiring a name (such as the binary). The name\nwill be displayed to the user when they request to print version or help and usage\ninformation. The name should not contain spaces (hyphens '-' are ok).",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_yaml","","Creates a new instace of `App` from a .yml (YAML) file. The YAML file must be properly\nformatted or this function will panic!(). A full example of supported YAML objects can be\nfound in `examples/17_yaml.rs` and `examples/17_yaml.yml`.",20,{"inputs":[{"name":"app"},{"name":"yaml"}],"output":{"name":"app"}}],[11,"author","","Sets a string of author(s) and will be displayed to the user when they request the help\ninformation with `--help` or `-h`.",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"bin_name","","Overrides the system-determined binary name. This should only be used when absolutely\nneccessary, such as the binary name for your application is misleading, or perhaps *not*\nhow the user should invoke your program.",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"about","","Sets a string briefly describing what the program does and will be displayed when\ndisplaying help information.",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"after_help","","Adds additional help information to be displayed in addition to and directly after\nauto-generated help. This information is displayed **after** the auto-generated help\ninformation. This additional help is often used to describe how to use the arguments,\nor caveats to be noted.",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"subcommands_negate_reqs","","Allows subcommands to override all requirements of the parent (this command). For example\nif you had a subcommand or even top level application which had a required arguments that\nare only required as long as there is no subcommand present.",20,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"subcommand_required","","Allows specifying that if no subcommand is present at runtime, error and exit gracefully",20,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"version","","Sets a string of the version number to be displayed when displaying version or help\ninformation.",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"usage","","Sets a custom usage string to override the auto-generated usage string.",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","Sets a custom help message and overrides the auto-generated one. This should only be used\nwhen the auto-generated message does not suffice.",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"help_short","","Sets the short version of the `help` argument without the preceding `-`.",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"version_short","","Sets the short version of the `version` argument without the preceding `-`.",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"arg_required_else_help","","Specifies that the help text sould be displayed (and then exit gracefully), if no\narguments are present at runtime (i.e. an empty run such as, `$ myprog`.",20,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides a subcommand from help message output.",20,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"global_version","","Uses version of the current command for all subcommands. (Defaults to false; subcommands\nhave independant version strings)",20,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"versionless_subcommands","","Disables `-V` and `--version` for all subcommands (Defaults to false; subcommands have\nversion flags)",20,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"unified_help_message","","By default the auto-generated help message groups flags, options, and positional arguments\nseparately. This setting disable that and groups flags and options together presenting a\nmore unified help message (a la getopts or docopt style).",20,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"wait_on_error","","Will display a message \"Press [ENTER]/[RETURN] to continue...\" and wait user before\nexiting",20,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"subcommand_required_else_help","","Specifies that the help text sould be displayed (and then exit gracefully), if no\nsubcommands are present at runtime (i.e. an empty run such as, `$ myprog`.",20,{"inputs":[{"name":"app"},{"name":"bool"}],"output":{"name":"self"}}],[11,"setting","","Enables Application level settings, passed as argument",20,{"inputs":[{"name":"app"},{"name":"appsettings"}],"output":{"name":"self"}}],[11,"settings","","Enables multiple Application level settings, passed as argument",20,null],[11,"arg","","Adds an argument to the list of valid possibilties manually. This method allows you full\ncontrol over the arguments settings and options (as well as dynamic generation). It also\nallows you specify several more advanced configuration options such as relational rules\n(exclusions and requirements).",20,{"inputs":[{"name":"app"},{"name":"arg"}],"output":{"name":"self"}}],[11,"args","","Adds multiple arguments to the list of valid possibilties by iterating over a Vec of Args",20,{"inputs":[{"name":"app"},{"name":"vec"}],"output":{"name":"self"}}],[11,"arg_from_usage","","A convienience method for adding a single basic argument (one without advanced\nrelational rules) from a usage type string. The string used follows the same rules and\nsyntax as `Arg::from_usage()`",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"args_from_usage","","Adds multiple arguments at once from a usage string, one per line. See `Arg::from_usage()`\nfor details on the syntax and rules supported.",20,{"inputs":[{"name":"app"},{"name":"str"}],"output":{"name":"self"}}],[11,"arg_group","","Adds an ArgGroup to the application. ArgGroups are a family of related arguments. By\nplacing them in a logical group, you make easier requirement and exclusion rules. For\ninstance, you can make an ArgGroup required, this means that one (and *only* one) argument\nfrom that group must be present. Using more than one argument from an ArgGroup causes a\nfailure (graceful exit).",20,{"inputs":[{"name":"app"},{"name":"arggroup"}],"output":{"name":"self"}}],[11,"arg_groups","","Adds a ArgGroups to the application. ArgGroups are a family of related arguments. By\nplacing them in a logical group, you make easier requirement and exclusion rules. For\ninstance, you can make an ArgGroup required, this means that one (and *only* one) argument\nfrom that group must be present. Using more than one argument from an ArgGroup causes a\nfailure (graceful exit).",20,{"inputs":[{"name":"app"},{"name":"vec"}],"output":{"name":"self"}}],[11,"subcommand","","Adds a subcommand to the list of valid possibilties. Subcommands are effectively sub apps,\nbecause they can contain their own arguments, subcommands, version, usage, etc. They also\nfunction just like apps, in that they get their own auto generated help, version, and\nusage.",20,{"inputs":[{"name":"app"},{"name":"app"}],"output":{"name":"self"}}],[11,"subcommands","","Adds multiple subcommands to the list of valid possibilties by iterating over a Vec of\n`SubCommand`s",20,{"inputs":[{"name":"app"},{"name":"vec"}],"output":{"name":"self"}}],[11,"print_help","","Prints the full help message to `io::stdout()` using a `BufWriter`",20,{"inputs":[{"name":"app"}],"output":{"name":"clapresult"}}],[11,"write_help","","Writes the full help message to the user to a `io::Write` object",20,{"inputs":[{"name":"app"},{"name":"w"}],"output":{"name":"clapresult"}}],[11,"get_matches","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands",20,{"inputs":[{"name":"app"}],"output":{"name":"argmatches"}}],[11,"get_matches_lossy","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands. Invalid unicode characters are replaced with\n`U+FFFD REPLACEMENT CHARACTER`",20,{"inputs":[{"name":"app"}],"output":{"name":"argmatches"}}],[11,"get_matches_safe","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands",20,{"inputs":[{"name":"app"}],"output":{"name":"clapresult"}}],[11,"get_matches_safe_lossy","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands. Invalid unicode characters are replaced with\n`U+FFFD REPLACEMENT CHARACTER`",20,{"inputs":[{"name":"app"}],"output":{"name":"clapresult"}}],[11,"get_matches_from","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands",20,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_lossy","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands. Invalid unicode characters are replaced with\n`U+FFFD REPLACEMENT CHARACTER`",20,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"argmatches"}}],[11,"get_matches_from_safe","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands",20,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"get_matches_from_safe_lossy","","Starts the parsing process. Called on top level parent app **ONLY** then recursively calls\nthe real parsing function for all subcommands. Invalid unicode characters are replaced with\n`U+FFFD REPLACEMENT CHARACTER`",20,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"get_matches_from_safe_borrow","","Starts the parsing process without consuming the `App` struct `self`. This is normally not\nthe desired functionality, instead prefer `App::get_matches_from_safe` which *does*\nconsume `self`.",20,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"get_matches_from_safe_borrow_lossy","","Starts the parsing process without consuming the `App` struct `self`. This is normally not\nthe desired functionality, instead prefer `App::get_matches_from_safe` which *does*\nconsume `self`. Invalid unicode characters are replaced with `U+FFFD REPLACEMENT CHARACTER`",20,{"inputs":[{"name":"app"},{"name":"i"}],"output":{"name":"clapresult"}}],[11,"default","","",15,{"inputs":[{"name":"arg"}],"output":{"name":"arg"}}],[11,"with_name","","Creates a new instance of `Arg` using a unique string name.\nThe name will be used by the library consumer to get information about\nwhether or not the argument was used at runtime.",15,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_yaml","","Creates a new instance of `Arg` from a .yml (YAML) file.",15,{"inputs":[{"name":"arg"},{"name":"btreemap"}],"output":{"name":"arg"}}],[11,"from_usage","","Creates a new instance of `Arg` from a usage string. Allows creation of basic settings\nfor Arg (i.e. everything except relational rules). The syntax is flexible, but there are\nsome rules to follow.",15,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"arg"}}],[11,"short","","Sets the short version of the argument without the preceding `-`.",15,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"long","","Sets the long version of the argument without the preceding `--`.",15,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"help","","Sets the help text of the argument that will be displayed to the user\nwhen they print the usage/help information.",15,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"required","","Sets whether or not the argument is required by default. Required by\ndefault means it is required, when no other mutually exclusive rules have\nbeen evaluated. Mutually exclusive rules take precedence over being required\nby default.",15,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"conflicts_with","","Sets a mutually exclusive argument by name. I.e. when using this argument,\nthe following argument can't be present.",15,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets mutually exclusive arguments by names. I.e. when using this argument,\nthe following argument can't be present.",15,{"inputs":[{"name":"arg"},{"name":"i"}],"output":{"name":"self"}}],[11,"mutually_overrides_with","","Sets a mutually overridable argument by name. I.e. this argument and\nthe following argument will override each other in POSIX style",15,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"mutually_overrides_with_all","","Sets a mutually overridable arguments by name. I.e. this argument and\nthe following argument will override each other in POSIX style",15,{"inputs":[{"name":"arg"},{"name":"i"}],"output":{"name":"self"}}],[11,"requires","","Sets an argument by name that is required when this one is present I.e. when\nusing this argument, the following argument *must* be present.",15,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets arguments by names that are required when this one is present I.e. when\nusing this argument, the following arguments *must* be present.",15,{"inputs":[{"name":"arg"},{"name":"i"}],"output":{"name":"self"}}],[11,"takes_value","","Specifies that the argument takes an additional value at run time.",15,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"index","","Specifies the index of a positional argument starting at 1.",15,{"inputs":[{"name":"arg"},{"name":"u8"}],"output":{"name":"self"}}],[11,"multiple","","Specifies that the flag or option may appear more than once. For flags, this results\nin the number of occurrences of the flag being recorded. For example `-ddd` would count as\nthree occurrences. The form `-d -d -d` would also be recognized as three occurrences. For\noptions, more than one value may be provided. The forms `--optional foo --optional bar`,\n`--optional foo bar` and `-ofoo -obar` are all recognized, assuming the relevant `short`\nand `long` option names have been set.",15,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"global","","Specifies that an argument can be matched to all child subcommands.",15,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"empty_values","","Allows an argument to accept explicit empty values. An empty value must be specified at the\ncommand line with an explicit `\"\"`, or `''`",15,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"hidden","","Hides an argument from help message output.",15,{"inputs":[{"name":"arg"},{"name":"bool"}],"output":{"name":"self"}}],[11,"possible_values","","Specifies a list of possible values for this argument. At runtime, clap verifies that only\none of the specified values was used, or fails with a usage string.",15,{"inputs":[{"name":"arg"},{"name":"i"}],"output":{"name":"self"}}],[11,"possible_value","","Specifies a possible value for this argument. At runtime, clap verifies that only\none of the specified values was used, or fails with a usage string.",15,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"group","","Specifies the name of the group the argument belongs to.",15,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"number_of_values","","Specifies how many values are required to satisfy this argument. For example, if you had a\n`-f <file>` argument where you wanted exactly 3 'files' you would set\n`.number_of_values(3)`, and this argument wouldn't be satisfied unless the user provided\n3 and only 3 values.",15,{"inputs":[{"name":"arg"},{"name":"u8"}],"output":{"name":"self"}}],[11,"validator","","Allows one to perform a validation on the argument value. You provide a closure which\naccepts a `String` value, a `Result` where the `Err(String)` is a message displayed to the\nuser.",15,{"inputs":[{"name":"arg"},{"name":"f"}],"output":{"name":"self"}}],[11,"max_values","","Specifies the *maximum* number of values are for this argument. For example, if you had a\n`-f <file>` argument where you wanted up to 3 'files' you would set\n`.max_values(3)`, and this argument would be satisfied if the user provided, 1, 2, or 3\nvalues.",15,{"inputs":[{"name":"arg"},{"name":"u8"}],"output":{"name":"self"}}],[11,"min_values","","Specifies the *minimum* number of values are for this argument. For example, if you had a\n`-f <file>` argument where you wanted at least 2 'files' you would set\n`.min_values(2)`, and this argument would be satisfied if the user provided, 2 or more\nvalues.",15,{"inputs":[{"name":"arg"},{"name":"u8"}],"output":{"name":"self"}}],[11,"value_names","","Specifies names for values of option arguments. These names are cosmetic only, used for\nhelp and usage strings only. The names are **not** used to access arguments. The values of\nthe arguments are accessed in numeric order (i.e. if you specify two names `one` and `two`\n`one` will be the first matched value, `two` will be the second).",15,{"inputs":[{"name":"arg"},{"name":"i"}],"output":{"name":"self"}}],[11,"value_name","","Specifies the name for value of option or positional arguments. This name is cosmetic only,\nused for help and usage strings. The name is **not** used to access arguments.",15,{"inputs":[{"name":"arg"},{"name":"str"}],"output":{"name":"self"}}],[11,"from","","",15,{"inputs":[{"name":"arg"},{"name":"arg"}],"output":{"name":"self"}}],[11,"fmt","","",21,{"inputs":[{"name":"argmatches"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"value_of","","Gets the value of a specific option or positional argument (i.e. an argument that takes\nan additional value at runtime). If the option wasn't present at runtime\nit returns `None`.",21,{"inputs":[{"name":"argmatches"},{"name":"str"}],"output":{"name":"option"}}],[11,"values_of","","Gets the values of a specific option or positional argument in a vector (i.e. an argument\nthat takes multiple values at runtime). If the option wasn't present at runtime it\nreturns `None`",21,{"inputs":[{"name":"argmatches"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_present","","Returns if an argument was present at runtime.",21,{"inputs":[{"name":"argmatches"},{"name":"str"}],"output":{"name":"bool"}}],[11,"occurrences_of","","Returns the number of occurrences of an option, flag, or positional argument at runtime.\nIf an argument isn't present it will return `0`. Can be used on arguments which *don't*\nallow multiple occurrences, but will obviously only return `0` or `1`.",21,{"inputs":[{"name":"argmatches"},{"name":"str"}],"output":{"name":"u8"}}],[11,"subcommand_matches","","Returns the `ArgMatches` for a particular subcommand or None if the subcommand wasn't\npresent at runtime.",21,{"inputs":[{"name":"argmatches"},{"name":"str"}],"output":{"name":"option"}}],[11,"subcommand_name","","Returns the name of the subcommand used of the parent `App`, or `None` if one wasn't found",21,{"inputs":[{"name":"argmatches"}],"output":{"name":"option"}}],[11,"subcommand","","Returns the name and `ArgMatches` of the subcommand used at runtime or (\"\", None) if one\nwasn't found.",21,null],[11,"usage","","Returns a string slice of the usage statement for the `App` (or `SubCommand`)",21,{"inputs":[{"name":"argmatches"}],"output":{"name":"str"}}],[11,"fmt","","",22,{"inputs":[{"name":"subcommand"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"with_name","","Creates a new instance of a subcommand requiring a name. Will be displayed\nto the user when they print version or help and usage information.",22,{"inputs":[{"name":"subcommand"},{"name":"str"}],"output":{"name":"app"}}],[11,"from_yaml","","Creates a new instance of a subcommand from a YAML (.yml) document",22,{"inputs":[{"name":"subcommand"},{"name":"yaml"}],"output":{"name":"app"}}],[11,"with_name","","Creates a new instance of `ArgGroup` using a unique string name.\nThe name will only be used by the library consumer and not displayed to the use.",23,{"inputs":[{"name":"arggroup"},{"name":"str"}],"output":{"name":"self"}}],[11,"from_yaml","","Creates a new instance of `ArgGroup` from a .yml (YAML) file.",23,{"inputs":[{"name":"arggroup"},{"name":"btreemap"}],"output":{"name":"arggroup"}}],[11,"add","","Adds an argument to this group by name",23,{"inputs":[{"name":"arggroup"},{"name":"str"}],"output":{"name":"self"}}],[11,"add_all","","Adds multiple arguments to this group by name",23,null],[11,"required","","Sets the requirement of this group. A required group will be displayed in the usage string\nof the application in the format `[arg|arg2|arg3]`. A required `ArgGroup` simply states\nthat one, and only one argument from this group *must* be present at runtime (unless\nconflicting with another argument).",23,{"inputs":[{"name":"arggroup"},{"name":"bool"}],"output":{"name":"self"}}],[11,"requires","","Sets the requirement rules of this group. This is not to be confused with a required group.\nRequirement rules function just like argument requirement rules, you can name other\narguments or groups that must be present when one of the arguments from this group is used.",23,{"inputs":[{"name":"arggroup"},{"name":"str"}],"output":{"name":"self"}}],[11,"requires_all","","Sets the requirement rules of this group. This is not to be confused with a required group.\nRequirement rules function just like argument requirement rules, you can name other\narguments or groups that must be present when one of the arguments from this group is used.",23,null],[11,"conflicts_with","","Sets the exclusion rules of this group. Exclusion rules function just like argument\nexclusion rules, you can name other arguments or groups that must not be present when one\nof the arguments from this group are used.",23,{"inputs":[{"name":"arggroup"},{"name":"str"}],"output":{"name":"self"}}],[11,"conflicts_with_all","","Sets the exclusion rules of this group. Exclusion rules function just like argument\nexclusion rules, you can name other arguments or groups that must not be present when one\nof the arguments from this group are used.",23,null],[11,"fmt","","",23,{"inputs":[{"name":"arggroup"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"format"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"claperrortype"},{"name":"claperrortype"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"claperrortype"},{"name":"claperrortype"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"claperrortype"}],"output":{"name":"claperrortype"}}],[11,"fmt","","",19,{"inputs":[{"name":"claperrortype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",16,{"inputs":[{"name":"claperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"use_stderr","","Should the message be written to `stdout` or not",16,{"inputs":[{"name":"claperror"}],"output":{"name":"bool"}}],[11,"exit","","Prints the error to `stderr` and exits with a status of `1`",16,{"inputs":[{"name":"claperror"}],"output":null}],[11,"description","","",16,{"inputs":[{"name":"claperror"}],"output":{"name":"str"}}],[11,"cause","","",16,{"inputs":[{"name":"claperror"}],"output":{"name":"option"}}],[11,"fmt","","",16,{"inputs":[{"name":"claperror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",16,{"inputs":[{"name":"claperror"},{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",16,{"inputs":[{"name":"claperror"},{"name":"error"}],"output":{"name":"self"}}],[14,"load_yaml!","","",null,null],[14,"value_t!","","Convenience macro getting a typed value `T` where `T` implements `std::str::FromStr`\nThis macro returns a `Result<T,String>` which allows you as the developer to decide\nwhat you'd like to do on a failed parse. There are two types of errors, parse failures\nand those where the argument wasn't present (such as a non-required argument).",null,null],[14,"value_t_or_exit!","","Convenience macro getting a typed value `T` where `T` implements `std::str::FromStr`\nThis macro returns a `T` or `Vec<T>` or exits with a usage string upon failure. This\nremoves some of the boiler plate to handle failures from value_t! above.",null,null],[14,"simple_enum!","","Convenience macro generated a simple enum with variants to be used as a type when parsing\narguments. This enum also provides a `variants()` function which can be used to retrieve a\n`Vec<&'static str>` of the variant names.",null,null],[14,"arg_enum!","","Convenience macro to generate more complete enums with variants to be used as a type when\nparsing arguments. This enum also provides a `variants()` function which can be used to retrieve a\n`Vec<&'static str>` of the variant names.",null,null],[14,"crate_version!","","Allows you pull the version for an from your Cargo.toml as MAJOR.MINOR.PATCH_PKGVERSION_PRE",null,null],[14,"clap_app!","","App, Arg, SubCommand and Group builder macro (Usage-string like input)",null,null]],"paths":[[3,"YamlLoader"],[4,"Yaml"],[4,"TEncoding"],[4,"TScalarStyle"],[3,"Marker"],[3,"ScanError"],[4,"TokenType"],[3,"Token"],[3,"SimpleKey"],[3,"Scanner"],[4,"State"],[4,"Event"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"],[3,"Arg"],[3,"ClapError"],[4,"AppSettings"],[4,"Format"],[4,"ClapErrorType"],[3,"App"],[3,"ArgMatches"],[3,"SubCommand"],[3,"ArgGroup"]]};
searchIndex['yaml_rust'] = {"items":[[0,"","yaml_rust","YAML 1.2 implementation in pure Rust.",null,null],[0,"yaml","","",null,null],[3,"YamlLoader","yaml_rust::yaml","",null,null],[4,"Yaml","","An YAML node is store as this `Yaml` enumeration, it provides an easy way to\naccess your YAML document.",null,null],[13,"Real","","float types are stored as String, and parsed on demand.\nNote that f64 does NOT implement Eq trait and can NOT be stored in BTreeMap",0,null],[13,"Integer","","Yaml int is stored as i64.",0,null],[13,"String","","Yaml scalar.",0,null],[13,"Boolean","","Yaml bool, e.g. `true` or `false`.",0,null],[13,"Array","","Yaml array, can be access as a `Vec`.",0,null],[13,"Hash","","Yaml hash, can be access as a `BTreeMap`.",0,null],[13,"Alias","","Alias, not fully supported yet.",0,null],[13,"Null","","Yaml bool, e.g. `null` or `~`.",0,null],[13,"BadValue","","Access non-exist node by Index trait will return `BadValue`.\nThis simplifies error handling of user. Invalid type conversion\nalso return `BadValue`.",0,null],[6,"Array","","",null,null],[6,"Hash","","",null,null],[11,"cmp","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"ordering"}}],[11,"fmt","","",0,{"inputs":[{"name":"yaml"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"yaml"},{"name":"yaml"}],"output":{"name":"bool"}}],[11,"clone","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"yaml"}}],[11,"on_event","","",1,{"inputs":[{"name":"yamlloader"},{"name":"event"}],"output":null}],[11,"load_from_str","","",1,{"inputs":[{"name":"yamlloader"},{"name":"str"}],"output":{"name":"result"}}],[11,"as_bool","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_i64","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_str","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_hash","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"as_vec","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"is_null","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"bool"}}],[11,"is_badvalue","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"bool"}}],[11,"as_f64","","",0,{"inputs":[{"name":"yaml"}],"output":{"name":"option"}}],[11,"from_str","","",0,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"yaml"},{"name":"str"}],"output":{"name":"yaml"}}],[11,"index","","",0,{"inputs":[{"name":"yaml"},{"name":"usize"}],"output":{"name":"yaml"}}],[0,"scanner","yaml_rust","",null,null],[3,"Marker","yaml_rust::scanner","",null,null],[3,"ScanError","","",null,null],[3,"Token","","",null,null],[3,"Scanner","","",null,null],[4,"TEncoding","","",null,null],[13,"Utf8","","",2,null],[4,"TScalarStyle","","",null,null],[13,"Any","","",3,null],[13,"Plain","","",3,null],[13,"SingleQuoted","","",3,null],[13,"DoubleQuoted","","",3,null],[13,"Literal","","",3,null],[13,"Foled","","",3,null],[4,"TokenType","","",null,null],[13,"NoToken","","",4,null],[13,"StreamStartToken","","",4,null],[13,"StreamEndToken","","",4,null],[13,"VersionDirectiveToken","","major, minor",4,null],[13,"TagDirectiveToken","","handle, prefix",4,null],[13,"DocumentStartToken","","",4,null],[13,"DocumentEndToken","","",4,null],[13,"BlockSequenceStartToken","","",4,null],[13,"BlockMappingStartToken","","",4,null],[13,"BlockEndToken","","",4,null],[13,"FlowSequenceStartToken","","",4,null],[13,"FlowSequenceEndToken","","",4,null],[13,"FlowMappingStartToken","","",4,null],[13,"FlowMappingEndToken","","",4,null],[13,"BlockEntryToken","","",4,null],[13,"FlowEntryToken","","",4,null],[13,"KeyToken","","",4,null],[13,"ValueToken","","",4,null],[13,"AliasToken","","",4,null],[13,"AnchorToken","","",4,null],[13,"TagToken","","handle, suffix",4,null],[13,"ScalarToken","","",4,null],[6,"ScanResult","","",null,null],[11,"fmt","","",2,{"inputs":[{"name":"tencoding"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"tencoding"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"tencoding"},{"name":"tencoding"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"tencoding"}],"output":{"name":"tencoding"}}],[11,"fmt","","",3,{"inputs":[{"name":"tscalarstyle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"tscalarstyle"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"tscalarstyle"},{"name":"tscalarstyle"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"tscalarstyle"}],"output":{"name":"tscalarstyle"}}],[11,"fmt","","",5,{"inputs":[{"name":"marker"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"marker"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"marker"},{"name":"marker"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"marker"}],"output":{"name":"marker"}}],[11,"fmt","","",6,{"inputs":[{"name":"scanerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",6,{"inputs":[{"name":"scanerror"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"scanerror"},{"name":"scanerror"}],"output":{"name":"bool"}}],[11,"clone","","",6,{"inputs":[{"name":"scanerror"}],"output":{"name":"scanerror"}}],[11,"new","","",6,{"inputs":[{"name":"scanerror"},{"name":"marker"},{"name":"str"}],"output":{"name":"scanerror"}}],[11,"description","","",6,{"inputs":[{"name":"scanerror"}],"output":{"name":"str"}}],[11,"cause","","",6,{"inputs":[{"name":"scanerror"}],"output":{"name":"option"}}],[11,"fmt","","",6,{"inputs":[{"name":"scanerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"tokentype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"tokentype"},{"name":"tokentype"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"tokentype"}],"output":{"name":"tokentype"}}],[11,"fmt","","",7,{"inputs":[{"name":"token"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",7,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"token"},{"name":"token"}],"output":{"name":"bool"}}],[11,"clone","","",7,{"inputs":[{"name":"token"}],"output":{"name":"token"}}],[11,"fmt","","",8,{"inputs":[{"name":"scanner"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"next","","",8,{"inputs":[{"name":"scanner"}],"output":{"name":"option"}}],[11,"new","","Creates the YAML tokenizer.",8,{"inputs":[{"name":"scanner"},{"name":"t"}],"output":{"name":"scanner"}}],[11,"get_error","","",8,{"inputs":[{"name":"scanner"}],"output":{"name":"option"}}],[11,"stream_started","","",8,{"inputs":[{"name":"scanner"}],"output":{"name":"bool"}}],[11,"stream_ended","","",8,{"inputs":[{"name":"scanner"}],"output":{"name":"bool"}}],[11,"mark","","",8,{"inputs":[{"name":"scanner"}],"output":{"name":"marker"}}],[11,"fetch_next_token","","",8,{"inputs":[{"name":"scanner"}],"output":{"name":"scanresult"}}],[11,"next_token","","",8,{"inputs":[{"name":"scanner"}],"output":{"name":"result"}}],[11,"fetch_more_tokens","","",8,{"inputs":[{"name":"scanner"}],"output":{"name":"scanresult"}}],[0,"parser","yaml_rust","",null,null],[3,"Parser","yaml_rust::parser","",null,null],[4,"Event","","`Event` is used with the low-level event base parsing API,\nsee `EventReceiver` trait.",null,null],[13,"NoEvent","","Reserved for internal use",9,null],[13,"StreamStart","","",9,null],[13,"StreamEnd","","",9,null],[13,"DocumentStart","","",9,null],[13,"DocumentEnd","","",9,null],[13,"Alias","","Refer to an anchor ID",9,null],[13,"Scalar","","Value, style, anchor_id, tag",9,null],[13,"SequenceStart","","Anchor ID",9,null],[13,"SequenceEnd","","",9,null],[13,"MappingStart","","Anchor ID",9,null],[13,"MappingEnd","","",9,null],[6,"ParseResult","","",null,null],[8,"EventReceiver","","",null,null],[10,"on_event","","",10,{"inputs":[{"name":"eventreceiver"},{"name":"event"}],"output":null}],[11,"fmt","","",9,{"inputs":[{"name":"event"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",9,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"event"},{"name":"event"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"event"}],"output":{"name":"event"}}],[11,"fmt","","",11,{"inputs":[{"name":"parser"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",11,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"load","","",11,{"inputs":[{"name":"parser"},{"name":"r"},{"name":"bool"}],"output":{"name":"result"}}],[0,"emitter","yaml_rust","",null,null],[3,"YamlEmitter","yaml_rust::emitter","",null,null],[4,"EmitError","","",null,null],[13,"FmtError","","",12,null],[13,"BadHashmapKey","","",12,null],[6,"EmitResult","","",null,null],[11,"fmt","","",12,{"inputs":[{"name":"emiterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"emiterror"}],"output":{"name":"emiterror"}}],[11,"from","","",12,{"inputs":[{"name":"emiterror"},{"name":"error"}],"output":{"name":"self"}}],[11,"new","","",13,{"inputs":[{"name":"yamlemitter"},{"name":"write"}],"output":{"name":"yamlemitter"}}],[11,"dump","","",13,{"inputs":[{"name":"yamlemitter"},{"name":"yaml"}],"output":{"name":"emitresult"}}]],"paths":[[4,"Yaml"],[3,"YamlLoader"],[4,"TEncoding"],[4,"TScalarStyle"],[4,"TokenType"],[3,"Marker"],[3,"ScanError"],[3,"Token"],[3,"Scanner"],[4,"Event"],[8,"EventReceiver"],[3,"Parser"],[4,"EmitError"],[3,"YamlEmitter"]]};
searchIndex['vec_map'] = {"items":[[0,"","vec_map","A simple map based on a vector for small integer keys. Space requirements\nare O(highest integer key).",null,null],[3,"VecMap","","A map optimized for small integer keys.",null,null],[3,"VacantEntry","","A vacant Entry.",null,null],[3,"OccupiedEntry","","An occupied Entry.",null,null],[3,"Iter","","An iterator over the key-value pairs of a map.",null,null],[3,"IterMut","","An iterator over the key-value pairs of a map, with the\nvalues being mutable.",null,null],[3,"Keys","","An iterator over the keys of a map.",null,null],[3,"Values","","An iterator over the values of a map.",null,null],[3,"IntoIter","","A consuming iterator over the key-value pairs of a map.",null,null],[4,"Entry","","A view into a single entry in a map, which may either be vacant or occupied.",null,null],[13,"Vacant","","A vacant Entry",0,null],[13,"Occupied","","An occupied Entry",0,null],[11,"clone","","",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"default","","",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"hash","","",1,{"inputs":[{"name":"vecmap"},{"name":"h"}],"output":null}],[11,"new","","Creates an empty `VecMap`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"vecmap"}}],[11,"with_capacity","","Creates an empty `VecMap` with space for at least `capacity`\nelements before resizing.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"vecmap"}}],[11,"capacity","","Returns the number of elements the `VecMap` can hold without\nreallocating.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"reserve_len","","Reserves capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long\nas all inserted keys are less than `len`.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"reserve_len_exact","","Reserves the minimum capacity for the given `VecMap` to contain `len` distinct keys.\nIn the case of `VecMap` this means reallocations will not occur as long as all inserted\nkeys are less than `len`.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":null}],[11,"keys","","Returns an iterator visiting all keys in ascending order of the keys.\nThe iterator's element type is `usize`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"keys"}}],[11,"values","","Returns an iterator visiting all values in ascending order of the keys.\nThe iterator's element type is `&'r V`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"values"}}],[11,"iter","","Returns an iterator visiting all key-value pairs in ascending order of the keys.\nThe iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns an iterator visiting all key-value pairs in ascending order of the keys,\nwith mutable references to the values.\nThe iterator's element type is `(usize, &'r mut V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"itermut"}}],[11,"split_off","","Splits the collection into two at the given key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"self"}}],[11,"len","","Returns the number of elements in the map.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs.",1,{"inputs":[{"name":"vecmap"}],"output":null}],[11,"get","","Returns a reference to the value corresponding to the key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"insert","","Inserts a key-value pair into the map. If the key already had a value\npresent in the map, that value is returned. Otherwise, `None` is returned.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"},{"name":"v"}],"output":{"name":"option"}}],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"option"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"entry"}}],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and\nreturns a mutable reference to the value in the entry.",0,{"inputs":[{"name":"entry"},{"name":"v"}],"output":{"name":"v"}}],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default\nfunction if empty, and returns a mutable reference to the value in the\nentry.",0,{"inputs":[{"name":"entry"},{"name":"f"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the VacantEntry's key,\nand returns a mutable reference to it.",2,{"inputs":[{"name":"vacantentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"get","","Gets a reference to the value in the entry.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"get_mut","","Gets a mutable reference to the value in the entry.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"into_mut","","Converts the entry into a mutable reference to its value.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"insert","","Sets the value of the entry with the OccupiedEntry's key,\nand returns the entry's old value.",3,{"inputs":[{"name":"occupiedentry"},{"name":"v"}],"output":{"name":"v"}}],[11,"remove","","Takes the value of the entry out of the map, and returns it.",3,{"inputs":[{"name":"occupiedentry"}],"output":{"name":"v"}}],[11,"fmt","","",1,{"inputs":[{"name":"vecmap"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_iter","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":{"name":"vecmap"}}],[11,"into_iter","","Returns an iterator visiting all key-value pairs in ascending order of\nthe keys, consuming the original `VecMap`.\nThe iterator's element type is `(usize, &'r V)`.",1,{"inputs":[{"name":"vecmap"}],"output":{"name":"intoiter"}}],[11,"extend","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"extend","","",1,{"inputs":[{"name":"vecmap"},{"name":"i"}],"output":null}],[11,"index","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"index_mut","","",1,{"inputs":[{"name":"vecmap"},{"name":"usize"}],"output":{"name":"v"}}],[11,"clone","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",4,null],[11,"next_back","","",4,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",5,null],[11,"next_back","","",5,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"keys"}}],[11,"clone","","",7,{"inputs":[{"name":"values"}],"output":{"name":"values"}}],[11,"next","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"size_hint","","",6,null],[11,"next_back","","",6,{"inputs":[{"name":"keys"}],"output":{"name":"option"}}],[11,"next","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"size_hint","","",7,null],[11,"next_back","","",7,{"inputs":[{"name":"values"}],"output":{"name":"option"}}],[11,"next","","",8,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",8,null],[11,"next_back","","",8,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}]],"paths":[[4,"Entry"],[3,"VecMap"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"Iter"],[3,"IterMut"],[3,"Keys"],[3,"Values"],[3,"IntoIter"]]};
searchIndex['strsim'] = {"items":[[0,"","strsim","This library implements string similarity metrics. Currently includes\nHamming, Levenshtein, Jaro, and Jaro-Winkler.",null,null],[4,"StrSimError","","",null,null],[13,"DifferentLengthArgs","","",0,null],[5,"hamming","","Calculates the number of positions in the two strings where the characters\ndiffer. Returns an error if the strings have different lengths.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"hammingresult"}}],[5,"jaro","","Calculates the Jaro similarity between two strings. The returned value\nis between 0.0 and 1.0 (higher value means more similar).",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_against_vec","","Calculates the Jaro distance between a string and each string in a vector.\nReturns a vector of corresponding values between 0.0 and 1.0 (higher value\nmeans more similar).",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"jaro_winkler","","Like Jaro but gives a boost to strings that have a common prefix.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"f64"}}],[5,"jaro_winkler_against_vec","","Calculates the Jaro-Winkler distances between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"levenshtein","","Calculates the minimum number of insertions, deletions, and substitutions\nrequired to change one string into the other.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"levenshtein_against_vec","","Calculates the Levenshtein distance between a string and each string in a\nvector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[5,"damerau_levenshtein","","Same as Levenshtein but allows for adjacent transpositions.",null,{"inputs":[{"name":"str"},{"name":"str"}],"output":{"name":"usize"}}],[5,"damerau_levenshtein_against_vec","","Calculates the Damerau-Levenshtein distance between a string and each string\nin a vector. Returns a vector of corresponding values.",null,{"inputs":[{"name":"str"},{"name":"vec"}],"output":{"name":"vec"}}],[6,"HammingResult","","",null,null],[11,"eq","","",0,{"inputs":[{"name":"strsimerror"},{"name":"strsimerror"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"strsimerror"},{"name":"strsimerror"}],"output":{"name":"bool"}}],[11,"fmt","","",0,{"inputs":[{"name":"strsimerror"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"StrSimError"]]};
searchIndex['ansi_term'] = {"items":[[0,"","ansi_term","This is a library for controlling colours and formatting, such as\nred bold text or blue underlined text, on ANSI terminals.",null,null],[3,"ANSIString","","An ANSI String is a string coupled with the Style to display it\nin a terminal.",null,null],[3,"Style","","A style is a collection of properties that can format a string\nusing ANSI escape codes.",null,null],[3,"ANSIStrings","","A set of `ANSIString`s collected together, in order to be written with a\nminimum of control characters.",null,null],[4,"Colour","","A colour is one specific type of ANSI escape code, and can refer\nto either the foreground or background colour.",null,null],[13,"Black","","",0,null],[13,"Red","","",0,null],[13,"Green","","",0,null],[13,"Yellow","","",0,null],[13,"Blue","","",0,null],[13,"Purple","","",0,null],[13,"Cyan","","",0,null],[13,"White","","",0,null],[13,"Fixed","","",0,null],[11,"clone","","",1,{"inputs":[{"name":"ansistring"}],"output":{"name":"ansistring"}}],[11,"fmt","","",1,{"inputs":[{"name":"ansistring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",1,{"inputs":[{"name":"ansistring"},{"name":"s"}],"output":{"name":"ansistring"}}],[11,"fmt","","",0,{"inputs":[{"name":"colour"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"colour"}],"output":{"name":"colour"}}],[11,"eq","","",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"bool"}}],[11,"normal","","Return a Style with the foreground colour set to this colour.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.\nThis is a short-cut so you don't have to use Blue.normal() just\nto get blue text.",0,{"inputs":[{"name":"colour"},{"name":"s"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",0,{"inputs":[{"name":"colour"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",0,{"inputs":[{"name":"colour"},{"name":"colour"}],"output":{"name":"style"}}],[11,"fmt","","",2,{"inputs":[{"name":"style"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"eq","","",2,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"style"},{"name":"style"}],"output":{"name":"bool"}}],[11,"new","","Creates a new Style with no differences.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"paint","","Paints the given text with this colour, returning an ANSI string.",2,{"inputs":[{"name":"style"},{"name":"s"}],"output":{"name":"ansistring"}}],[11,"bold","","Returns a Style with the bold property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"dimmed","","Returns a Style with the dimmed property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"italic","","Returns a Style with the italic property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"underline","","Returns a Style with the underline property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"blink","","Returns a Style with the blink property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"reverse","","Returns a Style with the reverse property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"hidden","","Returns a Style with the hidden property set.",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"on","","Returns a Style with the background colour property set.",2,{"inputs":[{"name":"style"},{"name":"colour"}],"output":{"name":"style"}}],[11,"default","","",2,{"inputs":[{"name":"style"}],"output":{"name":"style"}}],[11,"fmt","","",3,{"inputs":[{"name":"ansistrings"},{"name":"formatter"}],"output":{"name":"result"}}]],"paths":[[4,"Colour"],[3,"ANSIString"],[3,"Style"],[3,"ANSIStrings"]]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
